# Models With Three or More Levels and Cross-Classified Models

```{r}
#| label: morelevelssetup
#| echo: false
#| output: false

library(Statamarkdown)

library(lme4) 

library(JuliaCall)

julia_setup(JULIA_HOME = "/Applications/Julia-1.10.app/Contents/Resources/julia/bin")

```

## Introduction

A two level multilevel model imagines that *Level 1* units are nested in *Level 2* units. A three level multilevel model imagines that *Level 1* units are nested in *Level 2* units, which are in turn nested in *Level 3*. 

A *cross classified* model imagines that the nesting is not hierarchical, but rather that there are two sets of clusters or nestings in which individuals may be nested. 

Below, I describe the use of [Stata](https://www.stata.com/), [R](https://www.r-project.org/), and [Julia](https://www.julialang.org/) to estimate these models.

## Three Or More Levels {#sec-fourlevel}

### The Data

I use the *longitudinal* data from *Multilevel Thinking* to which I have added an extra level of *United Nations Region* [@ArelBundock2018]. 

### The Equation

$$\text{outcome}_{itj} = \beta_0 + \beta_1 \text{parental warmth}_{itj} + \beta_2 \text{physical punishment}_{itj} + \beta_3 \text{time}_{itj} \ + $$ {#eq-MLM-fourlevel-multilingual} 

$$\beta_4 \text{identity}_{itj} + \beta_5 \text{intervention}_{itj} + \beta_6 \text{HDI}_{itj} +$$

$$w_{0k} + u_{0j} + v_{0i} + e_{itjk}$$ 

Here we imagine $w_{0k}$ (region), $u_{0j}$ (country) and $v_{0i}$ (family) are hierarchically nested effects. 

## Cross-Classified Models

### The Data

I use the *cross-sectional* data from *Multilevel Thinking* to which I have added an extra level of a hypothetical language. 

### The Equation

$$\text{outcome}_{itj} = \beta_0 + \beta_1 \text{parental warmth}_{itj} + \beta_2 \text{physical punishment}_{itj} + \beta_3 \text{time}_{itj} \ + $$ {#eq-crossclassified-multilingual}

$$\beta_4 \text{identity}_{itj} + \beta_5 \text{intervention}_{itj} + \beta_6 \text{HDI}_{itj} +$$ 

$$u_{0j} + m_{0m} + e_{ijm}$$ 

Here $u_{0j}$ (country) and $m_{0m}$ (language) are not nested hierarchically, but are *cross classified*.

### Run The Models

::: {.panel-tabset group="language"}

#### Stata

```{stata, collectcode=TRUE}

use "fourlevel.dta", clear

```

```{stata, collectcode=TRUE}

mixed outcome || UNregion: || country: || family:

```

```{stata, collectcode=TRUE}

mixed outcome t warmth physical_punishment i.identity i.intervention HDI || UNregion: || country: || id:
  
```

#### R

```{r}

library(haven)

df4 <- read_dta("fourlevel.dta")

```

```{r}

df4$identity <- factor(df4$identity)

df4$intervention <- factor(df4$intervention)

```

::: {.callout-caution collapse="false"}
`lme4` does not directly provide p values in results, because of some disagreement over exactly how these p values should be calculated. Therefore, in this Appendix, I also call library `lmerTest` to provide p values for `lme4` results.
:::

::: {.callout-tip}
R prefers to use scientific notation when possible. I find that the use of scientific notation can be confusing in reading results. I turn off scientific notation by setting a penalty for its use:  `options(scipen = 999)`.  
:::

```{r}

library(lme4) 

library(lmerTest)

options(scipen = 999) 

fit4A <- lmer(outcome ~  (1 | UNregion/country/id),
             data = df4)

summary(fit4A)

```

```{r}

fit4B <- lmer(outcome ~ t + warmth + physical_punishment + 
                identity + intervention + HDI + 
                (1 | UNregion/country/id),
              data = df4)

summary(fit4B)

```

#### Julia

```{julia}
#| output: false
#| label: Julia-getdata
#| eval: false

using Tables, MixedModels, StatFiles, DataFrames, CategoricalArrays, DataFramesMeta

df4 = DataFrame(load("fourlevel.dta"))

```

```{julia}
#| output: false
#| eval: false

@transform!(df4, :country = categorical(:country))

@transform!(df4, :UNregion = categorical(:UNregion))

@transform!(df4, :identity = categorical(:identity))

@transform!(df4, :intervention = categorical(:intervention))

```

```{julia}
#| label: Julia-fourlevelA
#| eval: false

m4A = fit(MixedModel, @formula(outcome ~ t + warmth + 
                                  physical_punishment + 
                                  identity + intervention + 
                                  HDI +
                                  (1 | UNregion) + 
                                  (1 | country) + 
                                  (1 | id)), df4)

```

```{julia}
#| label: Julia-fourlevelB
#| eval: false

m4B = fit(MixedModel, @formula(outcome ~ t + warmth + 
                                  physical_punishment + 
                                  identity + intervention + 
                                  HDI +
                                  (1 | UNregion) + 
                                  (1 | country) + 
                                  (1 | id)), df4)

```

:::

### Interpretation

## Cross-Classified Models

### The Data

### The Equation

### Run The Models

::: {.panel-tabset group="language"}

#### Stata

```{stata, collectcode=TRUE}

use "crossclassified.dta", clear

```

```{stata}

mixed outcome || _all: R.country || _all: R.language

```

```{stata}

mixed outcome warmth physical_punishment i.identity i.intervention HDI || _all: R.country || _all: R.language

```

#### R

```{r}

library(haven)

dfCC <- read_dta("crossclassified.dta")

```

```{r}

dfCC$identity <- factor(dfCC$identity)

dfCC$intervention <- factor(dfCC$intervention)

```

```{r}

library(lme4) 

library(lmerTest)

options(scipen = 999) 

fitCC_A <- lmer(outcome ~  
                 (1 | country) +
                 (1 | language),
             data = dfCC)

summary(fitCC_A)

```

```{r}

fitCC_B <- lmer(outcome ~ t + warmth + physical_punishment + 
                identity + intervention + HDI + 
                (1 | country) +
                (1 | language),
              data = dfCC)

summary(fitCC_B)

```


#### Julia

:::

### Interpretation

