# Cross Sectional Multilevel Models

```{r}
#| label: unconditionalsetup
#| echo: false
#| output: false

library(Statamarkdown)

library(lme4) 

library(JuliaCall)

julia_setup(JULIA_HOME = "/Applications/Julia-1.10.app/Contents/Resources/julia/bin")

```

## The Equation

Recall the general model of @eq-MLMsimple, and the syntax outlined in @sec-syntax. Below in @eq-MLMsubstantive, we consider a more substantive example.

$$\text{outcome}_{ij}= \beta_0 + \beta_1 \text{warmth}_{ij} +$$ {#eq-MLMsubstantive}

$$\beta_2 \text{physical punishment}_{ij} +$$

$$\beta_3 \text{identity}_{ij} + \beta_4 \text{intervention}_{ij} + \beta_5 \text{HDI}_{j} +$$

$$u_{0j} + u_{1j} \times \text{warmth}_{ij} + e_{ij}$$ 

## Correlated and Uncorrelated Random Effects

Consider the covariance matrix of random effects (e.g. $u_{0j}$ and $u_{1j}$). In @eq-varcovar the covariances of the random effects are constrained to be zero.

$$\begin{bmatrix}
var(u_{0j}) & 0 \\
0 & var(u_{1j}) 
\end{bmatrix}$$ {#eq-varcovar}

As discussed in the Chapter on multilevel models with cross-sectional data, however, one can consider a multilevel model in which the random effects are correlated, as is the case in @eq-varcovaruns.

$$\begin{bmatrix}
var(u_{0j}) & cov(u_{0j}, u_{1j}) \\
cov(u_{0j}, u_{1j}) & var(u_{1j}) 
\end{bmatrix}$$ {#eq-varcovaruns}

Procedures for estimating models with uncorrelated and correlated random effects are detailed below [@StataCorp2023; @JSSv067i01; @MixedModels].

-------------------------------------------------------------
Software    Uncorrelated          Correlated
            Random                Random
            Effects               Effects
----------- --------------------- ---------------------------
Stata       default               add option: `, cov(uns)`

R           separate random       separate random 
            effects from          effects from
            grouping variable     grouping variable
            with `||`             with `|`

Julia       separate terms        separate random 
            for each random       effects from
            effect e.g.           grouping variable
            `(1 | group) +`       with `|`.
            `(0 + x | group)`
-------------------------------------------------------------

: Correlated and Uncorrelated Random Effects {#tbl-REs}

All models in the examples below are run with *uncorrelated* random effects, but could just as easily be run with *correlated* random effects. 

## Run Models

::: {.panel-tabset group="language"}

### Stata

#### Get The Data 

```{stata, collectcode=TRUE}

use simulated_multilevel_data.dta

```

#### Run The Model

::: {.callout-warning}
Statistically it is important to be clear on whether variables in one's model are continuous or categorical. Continuous variables can be entered straightforwardly into statistical syntax. Categorical variables, on the other hand usually require specific attention in Statistical software. In Stata, categorical variables are indicated in a statistical model by prefixing them with an `i.`. In R, categorical variables are distinguished by making them into factors e.g. `x <- factor(x)`. In Julia, categorical variables are created by using the `@transform` syntax detailed below.
:::

```{stata}
#| label: Stata-cross-sectional

mixed outcome warmth physical_punishment i.identity i.intervention HDI || country: warmth

```

### R

#### Get The Data

```{r}

library(haven)

df <- read_dta("simulated_multilevel_data.dta")

```

#### Run The Model

::: {.callout-caution collapse="false"}
`lme4` does not directly provide p values in results, because of some disagreement over exactly how these p values should be calculated. Therefore, in this Appendix, I also call library `lmerTest` to provide p values for `lme4` results.
:::

::: {.callout-tip}
R prefers to use scientific notation when possible. I find that the use of scientific notation can be confusing in reading results. I turn off scientific notation by setting a penalty for its use:  `options(scipen = 999)`.  
:::

```{r}
#| warning: false
#| label: R-cross-sectional

library(lme4) 

library(lmerTest)

options(scipen = 999) 

fit1 <- lmer(outcome ~ warmth + physical_punishment + 
               identity + intervention + HDI +
               (1 + warmth || country),
             data = df)

summary(fit1)

```

### Julia

#### Get The Data

```{julia}
#| output: false
#| label: Julia-cross-sectional

using Tables, MixedModels, StatFiles, DataFrames, CategoricalArrays, DataFramesMeta

df = DataFrame(load("simulated_multilevel_data.dta"))

```

#### Change Country To Categorical

```{julia}
#| output: false

@transform!(df, :country = categorical(:country))

```

#### Run The Model

```{julia}

m1 = fit(MixedModel, @formula(outcome ~ warmth + physical_punishment + 
               identity + intervention + HDI +
               (1 | country) +
               (0 + warmth | country)), df)

```


:::

## Interpretation

Models suggest that parental warmth is associated with increases in the beneficial outcome, while physical punishment is associated with decreases in the beneficial outcome. The intervention is associated with increases in the outcome. There is insufficient evidence that either identity group or the Human Development Index are associated with the outcome.



