# Storing Statistical Data

```{r}
#| echo: false
#| output: false
#| message: false

library(Statamarkdown)

```

## Spreadsheets

```{r}
#| echo: false
#| output: false

library(haven) # import Stata format data

df <- read_dta("simulated_multilevel_data.dta")

```

Spreadsheets are sometimes used to collect and store data. Spreadsheets may sometimes be used because they are the only program that some individuals or agencies have for storing data. Spreadsheet programs may also be used because spreadsheets can be very intuitive and easy ways of managing small amounts of data. 

However, spreadsheets may be problematic as an ultimate data storage solution for a number of reasons detailed below, especially as data sets grow in size. Notably, statistical programs like [Stata](https://www.stata.com/), [R](https://www.r-project.org/), or [Julia](https://julialang.org/) can all store additional information with each variable such as: a *variable label*, describing the contents of the variable, or the survey question that resulted in the variable; and a *value label*, which attaches qualitative information to each possible value of the response. 

Spreadsheets do not generally contain this extra information about each variable, or column of data, which may lead to errors in working with quantitative information.

::: {.callout-warning}
### If Data Are Stored In A Spreadsheet, Variable Names Should Be Limited To a Single Row of the Spreadsheet

If spreadsheets are used to store data, the first row of the data should be used to list the variable names, as is seen in the example below. Rows other than the first row should not contain additional information about the variables, but should only contain data. 

```{r}
#| echo: false
#| label: tbl-spreadsheet
#| tbl-cap: "Example Data As Stored in A Spreadsheet"

pander::pander(head(df))

```
:::

## Data in Statistical Format

I load the data from a statistical program.

### Describe The Data

Notice how a description of the data contains information that helps us to understand the variables.

```{r}
#| echo: false
#| label: tbl-varlabels
#| tbl-cap: "Variable Labels"

pander::pander(labelled::look_for(df)[1:3])

```


### Descriptive Statistics 

::: {.callout-tip}
### Variable Labels and Value Labels Help Us Understand Our Data

Notice how the descriptive statistics and graph are informative in that they contain information on the *variable label* and *value label*. These help us to get an intuitive sense of the information in the data. We see this information when we list out the data as well.
:::

```{r}
#| echo: false
#| label: tbl-descriptives
#| tbl-cap: "Descriptive Statistics"

df$country <- factor(df$country)

df$intervention <- factor(df$intervention,
                          levels = c(0, 1), 
                          labels = c("no intervention", 
                                     "intervention"))

df$identity <- factor(df$identity,
                          levels = c(0, 1), 
                          labels = c("Identity B", 
                                     "Identity A"))

pander::pander(summary(df))

```

### Graph

```{r}
#| echo: false
#| message: false
#| label: fig-graph-statistical
#| fig-cap: "Graph from Data Stored in Statistical Software"

library(ggplot2)

ggplot(df,
       aes(x = outcome,
           fill = intervention)) + 
  geom_histogram() +
  facet_wrap(~intervention,
             nrow = 2) +
  labs(title = "Beneficial Outcome",
       subtitle = "by Intervention Participation",
       x = "beneficial outcome") +
  scale_fill_viridis_d() +
  theme_minimal()

```


### List Out A Sample Of The Data

```{r}
#| echo: false
#| label: tbl-head
#| tbl-cap: "Sample of Data"

pander::pander(head(df))

```

## Data In Spreadsheet Format

```{stata}
#| echo: false
#| output: false

use "simulated_multilevel_data.dta"

export excel using "simulated_multilevel_data.xlsx", firstrow(variables) replace

```

I now import the spreadsheet data file. I use the first row of data as variable names.

```{r}
#| echo: false

library(readxl)

df2 <- read_excel("simulated_multilevel_data.xlsx")

```

We see right away that the data are less informative. 

### Describe The Data

Notice how a description of the data no longer contains much of the information that helped us to understand the variables.

```{r}
#| echo: false
#| label: tbl-varlabels2
#| tbl-cap: "Example Data As Stored in A Spreadsheet"

pander::pander(labelled::look_for(df2)[1:3])

```

```{r}
#| echo: false
#| label: tbl-spreadsheet2
#| tbl-cap: "Example Data As Stored in A Spreadsheet"

pander::pander(head(df2))

```

::: {.callout-warning}
Adding this valuable information back into the data set may take a great deal of extra effort.
:::
	
### Descriptive Statistics 

Notice here how the descriptive statistics and graph are much less informative. For example, it is now not immediately clear what the values of `identity` or `intervention` represent. The information on variable labels and value labels will have to be added back into the data when preparing a final product for dissemination.

```{r}
#| echo: false
#| tbl-cap: "Descriptive Statistics"
#| label: tbl-descriptives2

pander::pander(summary(df2))

```

### Graph

While the graph has an informative title, as well as informative axis labels, a crucial piece of information is missing: what each status of the intervention represents.

```{r}
#| echo: false
#| message: false
#| label: fig-graph-spreadsheet
#| fig-cap: "Graph from Data Stored in Spreadsheet"

library(ggplot2)

ggplot(df2,
       aes(x = outcome,
           fill = factor(intervention))) + 
  geom_histogram() +
  facet_wrap(~factor(intervention),
             nrow = 2) +
  labs(title = "Beneficial Outcome",
       subtitle = "by Intervention Participation",
       x = "beneficial outcome") +
  scale_fill_viridis_d(name = "intervention") +
  theme_minimal()

```

## A Few Final Issues

Notice, finally, how spreadsheets don't enforce the idea of whether variables are *numeric*, or *text*, and so would allow storage of different types of information in the same column. Relatedly, *numeric* variables may be improperly stored as *text*, often necessitating recoding before graphical or statistical procedures can be employed.

Second, a spreadsheet would allow some of your columns to have the same name, which might make data difficult to work with in other software.

Lastly, spreadsheets do not enforce the idea that the data have a *structure* wherein the *column header* is a *variable name*, while the *other rows* are *data*.

-------------------------------------------------------------
x           y       verylongvariablename   verylongvariablename
----------- ------- ---------------------- -------------------------
100         1       Smith                  20

200         2       30                     NA

not         x       yes                    60
applicable

                    some other
                    random 
                    information
-------------------------------------------------------------

: A Spreadsheet Table With Problematic Organization {#tbl-problematic}

## File Organization

Files for all of your work should not be stored all together in `downloads`. Ideally, you should have a specific set of folders for your work. Each project, should be stored in its own individual folder. Ideally, each project folder would have a separate sub-folder for separate aspects of the project such as data, code or syntax, and various outputs.

![A Hypothetical Set of Folders and Subfolders](storage.png)




















