{
  "hash": "d6ce6544dc459ce9fe57477af7c3866b",
  "result": {
    "markdown": "---\ntitle: \"Cross-Classified Models in Stata, R and Julia\"\n---\n\n\n\n## Introduction\n\nA two level multilevel model imagines that *Level 1* units are nested in *Level 2* units. A three level multilevel model imagines that *Level 1* units are nested in *Level 2* units, which are in turn nested in *Level 3*. \n\nA cross-classified model imagines that the nesting is not hierarchical, but rather that there are two sets of clusters or nestings in which individuals may be nested. \n\nIn this data, *events* are nested inside *persons* which are in turn nested in *countries*, since in this data, individuals never change countries. However, the use of a cross-classified framework would allow for a situation in which *persons* moved from country to country, and experienced different *events* in different *countries*. \n\nBelow, I describe the use of [Stata](https://www.stata.com/), [R](https://www.r-project.org/), and [Julia](https://www.julialang.org/) to estimate cross-classified models. Because this document is built by [`Quarto`](https://quarto.org/), I describe calling these programs from within a `Quarto` environment. However, each piece of software could be used individually and separately.\n\n## The Data\n\nThe examples below use the `simulated_multilevel_longitudinal_data.dta` file from [*Multilevel Thinking*](https://agrogan1.github.io/multilevel-thinking/simulated-multi-country-data.html). Here is a [direct link](https://github.com/agrogan1/multilevel-multilingual/raw/main/simulated_multilevel_longitudinal_data.dta) to download the data.\n\n\n\n::: {.cell}\n\n:::\n\n::: {#tbl-multilingual1 .cell tbl-cap='Sample of Simulated Multilevel Longitudinal Data'}\n::: {.cell-output-display}\n-----------------------------------------------------------------------------------\n country   HDI   family   id    group   t   physical_punishment   warmth   outcome \n--------- ----- -------- ----- ------- --- --------------------- -------- ---------\n    1      69      1      1.1     2     1            2              3       59.18  \n\n    1      69      1      1.1     2     2            2              2       58.29  \n\n    1      69      1      1.1     2     3            3              3       60.58  \n\n    1      69      2      1.2     2     1            4              0       61.54  \n\n    1      69      2      1.2     2     2            4              0       55.96  \n\n    1      69      2      1.2     2     3            4              2       56.19  \n-----------------------------------------------------------------------------------\n:::\n:::\n\n\n\n## The Equation\n\n$$\\text{outcome}_{ijt}= \\beta_0 + \\beta_1 t_{ijt} + \\beta_2 \\text{warmth}_{ijt} + \\beta_3 \\text{physical punishment}_{ijt} + \\\\ \\beta_4 \\text{group}_{ijt} + \\beta_5 \\text{HDI}_{ijt} + \\\\ u_{0j} + v_{0i} + e_{ijt}$$ {#eq-crossclassifiedsubstantive}\n   \n## Setup \n\n::: {.panel-tabset group=\"language\"}\n\n### Stata\n\nI need to use the library `Statamarkdown` to call Stata, or I could run Stata on its own\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Statamarkdown)\n```\n:::\n\n\n\n### R\n\nIn R, I use the library `lme4` to run multilevel models.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\n```\n:::\n\n\n\n### Julia\n\nI need to call Julia from R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(JuliaCall)\n\njulia_setup(JULIA_HOME = \"/Applications/Julia-1.8.app/Contents/Resources/julia/bin\")\n```\n:::\n\n\n\n:::\n\n## Get Data & Run Models\n\nTo explain statistical syntax for each software, I consider the more general case of a cross-classified model with dependent variable `y`, independent variables `x` and `z`, clustering variables `country` and `id`.\n\n$$y = \\beta_0 + \\beta_1 x_{ijt} + \\beta_2 z_{ijt} + u_{0j} + v_{0i} + e_{ijt}$$ {#eq-crossclassfiedsimple}\n\n::: {.panel-tabset group=\"language\"}\n\n### Stata\n\nIn Stata `mixed`, the syntax for a multilevel model of the form described in @eq-crossclassfiedsimple is:\n\n`mixed y x || _all: R.group1 || group2:`\n\n#### Get The Data \n\n::: {.callout-tip collapse=\"true\"}\n#### Tip For Running Stata From Quarto\n\nBecause I am running Stata from inside a Quarto document, and running Stata in multiple chunks, I need to use the `collectcode=TRUE` option in the first Stata chunk. i.e. my Quarto chunk needs to begin with ````{stata, collectcode=TRUE}`\n\nSee Doug Hemken's excellent documentation on `Statamarkdown` [here](https://www.ssc.wisc.edu/~hemken/Stataworkshops/Statamarkdown/linking-code-blocks.html#linking-code-blocks-1).\n:::\n\n\n\n::: {.cell collectcode='true'}\n\n```{.stata .cell-code}\n\nuse simulated_multilevel_longitudinal_data.dta\n\n```\n:::\n\n\n\n#### Run The Model\n\n\n\n::: {.cell}\n\n```{.stata .cell-code}\n\nmixed outcome t warmth physical_punishment group HDI || _all: R.country || id:\n\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nvariable t not found\nr(111);\n\nend of do-file\nr(111);\n```\n:::\n:::\n\n\n\n### R\n\nIn R `lme4`, the general syntax for a multilevel model of the form described in @eq-crossclassfiedsimple is:\n\n`lmer(y ~ x + z + (1 | group1) + (1 | group2), data = ...)`\n\n#### Get The Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\n\ndf <- read_dta(\"simulated_multilevel_longitudinal_data.dta\")\n```\n:::\n\n\n\n#### Run The Model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 <- lmer(outcome ~ t + warmth + physical_punishment + \n               group + HDI +\n               (1 | id) +\n               (1 | country),\n             data = df)\n\nsummary(fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: outcome ~ t + warmth + physical_punishment + group + HDI + (1 |  \n    id) + (1 | country)\n   Data: df\n\nREML criterion at convergence: 57088.4\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.4471 -0.6226  0.0081  0.6153  3.1993 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n id       (Intercept)  8.864   2.977   \n country  (Intercept)  3.924   1.981   \n Residual             26.008   5.100   \nNumber of obs: 9000, groups:  id, 3000; country, 30\n\nFixed effects:\n                     Estimate Std. Error t value\n(Intercept)         49.494782   1.471780  33.629\nt                    0.987964   0.065840  15.005\nwarmth               0.946259   0.038200  24.771\nphysical_punishment -0.926880   0.049970 -18.549\ngroup                0.985786   0.153550   6.420\nHDI                  0.007543   0.021437   0.352\n\nCorrelation of Fixed Effects:\n            (Intr) t      warmth physc_ group \nt           -0.090                            \nwarmth      -0.085  0.008                     \nphyscl_pnsh -0.085  0.003 -0.019              \ngroup       -0.154  0.000 -0.013 -0.008       \nHDI         -0.943  0.000 -0.003  0.003  0.000\n```\n:::\n:::\n\n\n\n### Julia\n\nIn Julia `MixedModels`, the general syntax for a multilevel model of the form described in @eq-crossclassfiedsimple is:\n\n`fit(MixedModel, @formula(y ~ x + z + (1 | group1) + (1 | group2)), data)`\n\n#### Load The Needed Packages And Load The Data\n\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing Tables, MixedModels, StatFiles, DataFrames, CategoricalArrays, DataFramesMeta\n\ndf = DataFrame(load(\"simulated_multilevel_longitudinal_data.dta\"))\n```\n:::\n\n\n\n#### Change Country To Categorical\n\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n@transform!(df, :country = categorical(:country))\n```\n:::\n\n\n\n#### Run The Model\n\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n\nm1 = fit(MixedModel, @formula(outcome ~ t + warmth + physical_punishment + \n                                group + HDI +\n                                (1 | id) +\n                                (1 | country)), df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by maximum likelihood\n outcome ~ 1 + t + warmth + physical_punishment + group + HDI + (1 | id) + (1 | country)\n    logLik   -2 logLik      AIC         AICc        BIC     \n -28533.9968  57067.9935  57085.9935  57086.0136  57149.9384\n\nVariance components:\n            Column   Variance Std.Dev.\nid       (Intercept)   8.85264 2.97534\ncountry  (Intercept)   3.65030 1.91058\nResidual              26.00093 5.09911\n Number of obs: 9000; levels of grouping factors: 3000, 30\n\n  Fixed-effects parameters:\n──────────────────────────────────────────────────────────────\n                           Coef.  Std. Error       z  Pr(>|z|)\n──────────────────────────────────────────────────────────────\n(Intercept)          49.4945       1.42422     34.75    <1e-99\nt                     0.987965     0.0658315   15.01    <1e-50\nwarmth                0.946255     0.0381869   24.78    <1e-99\nphysical_punishment  -0.926774     0.0499549  -18.55    <1e-76\ngroup                 0.985819     0.153487     6.42    <1e-09\nHDI                   0.00754357   0.0207101    0.36    0.7157\n──────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n\n:::\n\n",
    "supporting": [
      "cross-classified-multilingual_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}