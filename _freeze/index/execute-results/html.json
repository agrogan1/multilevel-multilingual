{
  "hash": "e64547080531634ac6733423c6f2c70a",
  "result": {
    "engine": "knitr",
    "markdown": "# Multilevel Multilingual\n\n> \"This curious world which we inhabit is more wonderful than it is convenient...\" [@Thoreau1975]\n\n> \"Mathematics is my secret. My secret weakness. I feel like a stubborn, helpless fool in the middle of a problem. Trapped and crazed. Also, thrilled.\" [@Schanen2021]\n\n## Introduction\n\nBelow, I describe the use of [Stata](https://www.stata.com/) [@StataCorp2021:2], [R](https://www.r-project.org/) [@RProgram; @JSSv067i01], and [Julia](https://www.julialang.org/) [@JuliaArticle; @MixedModels] to estimate multilevel models. \n\nAll of these software packages can estimate multilevel models. However, there are substantial differences between the different packages: Stata is proprietary *for cost* software, which is very well documented and very intuitive. While it costs money to purchase Stata, the price is often very reasonal for academic and educational use. R is free open source software which is less intuitive, but there are many excellent resources for learning R. There is often a cost associated with purchasing books and other materials for learning R. Julia is newer open source software, and ostensibly much faster than either Stata or R, which may be an important advantage when running multilevel models with very large data sets. At this point in time, both Stata and R feel much more *stable* than Julia which is still evolving software.\n\nWhile any of these software packages can be used for learning and estimating multilevel models, I will offer my own opinion--based upon 15 years of teaching multilevel models at the doctoral level--that Stata offers the quickest pathway for learning the basic and advanced uses of multilevel models. I also believe the intuitive nature of Stata syntax contributes to accurate and replicable work in this area.\n\n-------------------------------------------------------------\nSoftware    Cost       Ease of Use\n----------- ---------- --------------------------------------\nStata       some cost  learning curve, but very intuitive\n                       for both multilevel modeling and\n                       graphing.\n\nR           free       learning curve: intuitive for \n                       multilevel modeling; but steeper\n                       learning curve for graphing (`ggplot`).\n\nJulia       free       steep learning curve in general: \n                       steep learning curve\n                       for multilevel modeling; and very steep\n                       learning curve for graphing. Graphics\n                       libraries are very much under development\n                       and in flux.\n-------------------------------------------------------------\n\n: Software for Multilevel Modeling {#tbl-software}\n\n::: {.callout-tip}\n## Results Will Vary Somewhat\n\nEstimating multilevel models is a complex endeavor. The software details of how this is accomplished are beyond the purview of this book. Suffice it to say that across different software packages there will be differences in estimation routines, resulting in some numerical differences in the results provided by different software packages. Substantively speaking, however, results should agree across software. \n:::\n\n::: {.callout-tip}\n## Multi-Line Commands\n\nSometimes I have written commands out over multiple lines. I have done this for especially long commands, but have also sometimes done this simply for the sake of clarity. The different software packages have different approaches to multi-line commands.\n\n1. By default, *Stata* ends a command at the end of a line. If you are going to write a multi-line command you should use the `///` line continuation characters.\n2. *R* is the software that most naturally can be written using multiple lines, as R commands are usually clearly encased in parentheses (`()`) or continued with `+` signs.\n3. Like *Stata*, *Julia* expects commands to end at the end of a line. If you are going to write a mult-line command, all commands except for the last line should end in a character that clearly indicates continuation, like a `+` sign. An alternative is to encase the entire Julia command in an outer set of parentheses (`()`).\n:::\n\n::: {.callout-tip}\n## Running Statistical Packages in Quarto\n\nI used Quarto ([https://quarto.org/](https://quarto.org/)) to create this Appendix. Quarto is a programming and publishing environment that can run multiple programming languages, including Stata, R and Julia, and that can write to multiple output formats including HTML, PDF, and MS Word. To run Stata, I used the `Statamarkdown` library in R to connect Stata to Quarto. Quarto has a built in connection to R, and runs R without issue. To run Julia, I used the `JuliaCall` library in R to connect Quarto to Julia.\n\nOf course, each of these programs can be run by itself, if you have them installed on your computer.\n:::\n\n## The Data {#sec-data}\n\nThe examples use the `simulated_multilevel_data.dta` file from [*Multilevel Thinking*](https://agrogan1.github.io/multilevel-thinking/simulated-multi-country-data.html). Here is a [direct link](https://github.com/agrogan1/multilevel-multilingual/raw/main/simulated_multilevel_data.dta) to download the data.\n\n\n::: {.cell}\n\n:::\n\n::: {#tbl-multilingual1 .cell tbl-cap='Sample of Simulated Multilevel Data'}\n::: {.cell-output-display}\n\n------------------------------------------------------------------------------\n country   HDI   family   id    identity   intervention   physical_punishment \n--------- ----- -------- ----- ---------- -------------- ---------------------\n    1      69      1      1.1      2            0                  3          \n\n    1      69      2      1.2      2            1                  2          \n\n    1      69      3      1.3      1            1                  3          \n\n    1      69      4      1.4      2            0                  0          \n\n    1      69      5      1.5      2            0                  4          \n\n    1      69      6      1.6      1            1                  5          \n------------------------------------------------------------------------------\n\nTable: Table continues below\n\n \n------------------\n warmth   outcome \n-------- ---------\n   3       57.47  \n\n   1       50.1   \n\n   2       52.92  \n\n   5       60.17  \n\n   4       55.05  \n\n   3       49.81  \n------------------\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## An Introduction To Equations and Syntax {#sec-syntax}\n\nTo explain statistical syntax for each software, I consider the general case of a multilevel model with dependent variable `y`, independent variables `x` and `z`, clustering variable `group`, and a random slope for `x`. *i* is the index for the person, while *j* is the index for the `group`.\n\n$$y = \\beta_0 + \\beta_1 x_{ij} + \\beta_2 z_{ij} + u_{0j} + u_{1j} \\times x_{ij} + e_{ij}$$ {#eq-MLMsimple}\n\n::: {.panel-tabset group=\"language\"}\n\n### Stata\n\nIn Stata `mixed`, the syntax for a multilevel model of the form described in @eq-MLMsimple is:\n\n\n::: {.cell}\n\n```{.stata .cell-code}\nmixed y x || group: x\n\n```\n:::\n\n\n### R\n\nIn R `lme4`, the general syntax for a multilevel model of the form described in @eq-MLMsimple is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\n\nlmer(y ~ x + z + (1 + x || group), data = ...)\n```\n:::\n\n\n### Julia\n\nIn Julia `MixedModels`, the general syntax for a multilevel model of the form described in @eq-MLMsimple is:\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing MixedModels\n\nfit(MixedModel, @formula(y ~ x + z + (1 + x | group)), data)\n\n```\n:::\n\n\n:::\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}