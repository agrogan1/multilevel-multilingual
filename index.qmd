# Multilevel Multilingual

> "This curious world which we inhabit is more wonderful than it is convenient..." [@Thoreau1975]

> "Mathematics is my secret. My secret weakness. I feel like a stubborn, helpless fool in the middle of a problem. Trapped and crazed. Also, thrilled." [@Schanen2021]

## Introduction

Below, I describe the use of [Stata](https://www.stata.com/) [@StataCorp2021:2], [R](https://www.r-project.org/) [@RProgram; @JSSv067i01], and [Julia](https://www.julialang.org/) [@JuliaArticle; @MixedModels] to estimate multilevel models. 

::: {.callout-tip}
## Results Will Vary Somewhat

Estimating multilevel models is a complex endeavor. The software details of how this is accomplished are beyond the purview of this book. Suffice it to say that across different software packages there will be differences in estimation routines, resulting in some numerical differences in the results provided by different software packages. Substantively speaking, however, results should agree across software. 
:::

::: {.callout-tip}
## Multi-Line Commands

Sometimes I have written commands out over multiple lines. I have done this for especially long commands, but have also sometimes done this simply for the sake of clarity. The different software packages have different approaches to multi-line commands.

1. By default, *Stata* ends a command at the end of a line. If you are going to write a multi-line command you should use the `///` line continuation characters.
2. *R* is the software that most naturally can be written using multiple lines, as R commands are usually clearly encased in parentheses (`()`) or continued with `+` signs.
3. Like *Stata*, *Julia* expects commands to end at the end of a line. If you are going to write a mult-line command, all commands except for the last line should end in a character that clearly indicates continuation, like a `+` sign. An alternative is to encase the entire Julia command in an outer set of parentheses (`()`).
:::

## The Data {#sec-data}

The examples use the `simulated_multilevel_data.dta` file from [*Multilevel Thinking*](https://agrogan1.github.io/multilevel-thinking/simulated-multi-country-data.html). Here is a [direct link](https://github.com/agrogan1/multilevel-multilingual/raw/main/simulated_multilevel_data.dta) to download the data.

```{r}
#| echo: false
#| output: false

file.copy("../multilevel-thinking/simulate-and-analyze-multilevel-data/simulated_multilevel_data.dta", 
          ".",
          overwrite = TRUE) # copy over most recent version

file.copy("../multilevel-thinking/simulate-and-analyze-multilevel-data/simulated_multilevel_longitudinal_data.dta", 
          ".",
          overwrite = TRUE) # copy over most recent version

```

```{r}
#| echo: false
#| label: tbl-multilingual1
#| tbl-cap: Sample of Simulated Multilevel Data

library(haven) # read Stata

library(pander) # nice tables

df <- read_dta("simulated_multilevel_data.dta") # read in data

pander(head(df)) # nice table

```

```{r}
#| echo: false
#| output: false

# KEEP THIS CHUNK FOR INFORMATIONAL PURPOSES!!!

library(JuliaCall)

# OS dependent location of Julia

switch(Sys.info()[['sysname']],
       Windows= {julia_setup(JULIA_HOME = "C:/Users/agrogan/AppData/Local/Programs/Julia-1.10.2/bin/")},
       Darwin = {julia_setup(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin")})

```

## An Introduction To Equations and Syntax {#sec-syntax}

To explain statistical syntax for each software, I consider the general case of a multilevel model with dependent variable `y`, independent variables `x` and `z`, clustering variable `group`, and a random slope for `x`. *i* is the index for the person, while *j* is the index for the `group`.

$$y = \beta_0 + \beta_1 x_{ij} + \beta_2 z_{ij} + u_{0j} + u_{1j} \times x_{ij} + e_{ij}$$ {#eq-MLMsimple}

::: {.panel-tabset group="language"}

### Stata

In Stata `mixed`, the syntax for a multilevel model of the form described in @eq-MLMsimple is:

```{stata}
#| echo: true
#| eval: false

mixed y x || group: x

```

### R

In R `lme4`, the general syntax for a multilevel model of the form described in @eq-MLMsimple is:

```{r}
#| echo: true
#| eval: false

library(lme4)

lmer(y ~ x + z + (1 + x || group), data = ...)

```

### Julia

In Julia `MixedModels`, the general syntax for a multilevel model of the form described in @eq-MLMsimple is:

```{julia}
#| echo: true
#| eval: false

using MixedModels

fit(MixedModel, @formula(y ~ x + z + (1 + x | group)), data)

```

:::

