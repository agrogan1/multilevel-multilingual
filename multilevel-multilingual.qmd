---
title: "Multilevel Models in Stata, R and Julia"
author: "Andrew Grogan-Kaylor"
date: "today"
format:
  html:
    toc: true
    number-sections: true
    theme:
      light: cosmo
      dark: vapor
---

## Introduction

Below, I describe the use of [Stata](https://www.stata.com/), [R](https://www.r-project.org/), and [Julia](https://www.julialang.org/) to estimate multilevel models. Because this document is built by [`quarto`](https://quarto.org/), I describe calling these programs from within a `quarto` environment. However, each piece of software could be used individually and separately.

## The Data

```{r}
#| echo: false
#| label: fig-bookcover
#| fig-cap: "Book Cover For Multilevel Thinking"
#| column: margin

knitr::include_graphics("bookcover.png")

```


The examples below use the `simulated_multilevel_data.dta` file from [*Multilevel Thinking*](https://agrogan1.github.io/multilevel-thinking/simulated-multi-country-data.html). Here is a [direct link](https://github.com/agrogan1/multilevel-multilingual/raw/main/simulated_multilevel_data.dta) to download the data.

```{r}
#| output: false

file.copy("../multilevel-thinking/simulate-and-analyze-multilevel-data/simulated_multilevel_data.dta", 
          ".",
          overwrite = TRUE) # copy over most recent version

```

```{r}
#| echo: false
#| label: tbl-multilingual1
#| tbl-cap: Sample of Simulated Multilevel Data

library(haven) # read Stata

library(pander) # nice tables

df <- read_dta("simulated_multilevel_data.dta") # read in data

pander(head(df)) # nice table

```

## The Equation

$$\begin{gather} \text{outcome}_{ij}= \beta_0 + \beta_1 \text{warmth}_{ij} + \beta_2 \text{physical punishment}_{ij} + \\ \beta_3 \text{group}_{ij} + \beta_4 \text{HDI}_{ij} + \\ u_{0j} + u_{1j} \times \text{warmth} + e_{ij} \end{gather}$$ {#eq-MLMsubstantive}
   
## Setup 

::: {.panel-tabset}

### Stata

I need to use the library `Statamarkdown` to call Stata, or I could run Stata on its own

```{r}

library(Statamarkdown)

```

### R

In R, I use the library `lme4` to run multilevel models.

```{r}

library(lme4)

```

### Julia

I need to call Julia from R.

```{r}

library(JuliaCall)

julia_setup(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin")

```

:::

## Get Data & Run Models

To explain statistical syntax for each software, I consider the more general case of a multilevel model with dependent variable `y`, independent variables `x` and `z`, clustering variable `group`, and a random slope for `x`.

$$y = \beta_0 + \beta_1 x_{ij} + \beta_2 z_{ij} + u_0 + u_1j \times x + e_{ij}$$ {#eq-MLMsimple}

::: {.panel-tabset}

### Stata

In Stata `mixed`, the syntax for a multilevel model of the form described in @eq-MLMsimple is:

`mixed y x || group: x`

#### Get The Data And Run The Model

```{stata}

use simulated_multilevel_data.dta

mixed outcome warmth physical_punishment group HDI || country: warmth

```

### R

In R `lme4`, the general syntax for a multilevel model of the form described in @eq-MLMsimple is:

`lmer(y ~ x + z + (1 + x || group), data = ...)`

#### Get The Data

```{r}

library(haven)

df <- read_dta("simulated_multilevel_data.dta")

```

#### Run The Model

```{r}
#| warning: false

fit1 <- lmer(outcome ~ warmth + physical_punishment + 
               group + HDI +
               (1 + warmth || country),
             data = df)

summary(fit1)

```

### Julia

In Julia `MixedModels`, the general syntax for a multilevel model of the form described in @eq-MLMsimple is:

`fit(MixedModel, @formula(y ~ x + z + (1 + x | group)), data)`

#### Load The Needed Packages And Load The Data

```{julia}
#| output: false

using Tables, MixedModels, StatFiles, DataFrames, CategoricalArrays, DataFramesMeta

df = DataFrame(load("simulated_multilevel_data.dta"))

```

#### Change Country To Categorical

```{julia}
#| output: false

@transform!(df, :country = categorical(:country))

```

#### Run The Model

```{julia}

m1 = fit(MixedModel, @formula(outcome ~ warmth + physical_punishment + 
               group + HDI +
               (1 + warmth | country)), df)

```

:::

